name: Integration Pipeline

on:
  pull_request:
    types:
      - opened
      - synchronize

jobs:
  build_and_test_module_a:
    runs-on: ubuntu-20.04
    if: git diff --name-only ${{ github.base_ref }}...${{ github.head_ref }} | grep -q '^module_a/'
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10.2"

      - name: Installing dependencies
        working-directory: module_a
        run: |
          make setup

      - name: Linting Module A
        working-directory: module_a
        run: |
          make lint

      - name: Build and Test Module A
        working-directory: module_a
        run: |
          docker build \
            --cache-from=type=local,src=/tmp/.buildx-cache \
            --cache-to=type=local,dest=/tmp/.buildx-cache \
            -t module_a:pull-request \
            .
          make test


  build_and_test_module_b:
    runs-on: ubuntu-20.04
    if: git diff --name-only ${{ github.base_ref }}...${{ github.head_ref }} | grep -q '^module_B/'
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10.2"

      - name: Installing dependencies
        working-directory: module_b
        run: |
          make setup

      - name: Linting Module B
        working-directory: module_b
        run: |
          make lint

      - name: Build and Test Module B
        working-directory: app/module_b
        run: |
          docker build \
            --cache-from=type=local,src=/tmp/.buildx-cache \
            --cache-to=type=local,dest=/tmp/.buildx-cache \
            -t module_b:pull-request \
            .
          make test


  build_and_test_module_c:
    runs-on: ubuntu-20.04
    if: git diff --name-only ${{ github.base_ref }}...${{ github.head_ref }} | grep -q '^module_c/'
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10.2"

      - name: Installing dependencies
        working-directory: module_c
        run: |
          make setup

      - name: Linting Module C
        working-directory: module_c
        run: |
          make lint

      - name: Build and Test Module C
        working-directory: app/module_c
        run: |
          docker build \
            --cache-from=type=local,src=/tmp/.buildx-cache \
            --cache-to=type=local,dest=/tmp/.buildx-cache \
            -t module_c:pull-request \
            .
          make test

  deploy-infrastructure:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.0.0

      - name: Initialize Terraform
        run: make tf/init

      - name: Check Terraform formatting
        run: terraform fmt -check

      - name: Validate Terraform configuration
        run: make tf/validate

      - name: Plan Terraform changes
        run: ls -la && make tf/plan

      - name: Apply Terraform changes
        if: github.event.action == 'opened' || github.event.action == 'synchronize'
        run: make tf/apply

      - name: Destroy Terraform resources
        if: github.event.action == 'closed'
        run: terraform destroy -auto-approve infrastructure