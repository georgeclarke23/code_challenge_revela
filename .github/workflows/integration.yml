name: Integration Pipeline

on:
  pull_request:
    types:
      - opened
      - synchronize

jobs:
  build_and_test_module_a:
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10.2"

      - name: Check folder changes
        id: folder-changes
        run: |
          if git diff --name-only HEAD^ HEAD | grep -q '^module_a/'; then
            echo "::set-output name=folder-changed::true"
          else
            echo "::set-output name=folder-changed::false"
          fi

      - name: Installing dependencies
        if: steps.folder-changes.outputs.folder-changed == 'true'
        working-directory: module_a
        run: |
          make setup

      - name: Linting Module A
        if: steps.folder-changes.outputs.folder-changed == 'true'
        working-directory: module_a
        run: |
          make lint

      - name: Building docker image
        if: steps.folder-changes.outputs.folder-changed == 'true'
        working-directory: module_a
        run: |
          docker build -t module_a:pull-request .

      - name: Test Module A
        if: steps.folder-changes.outputs.folder-changed == 'true'
        working-directory: module_a
        run: |
          make test

  build_and_test_module_b:
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10.2"

      - name: Check folder changes
        id: folder-changes
        run: |
          if git diff --name-only ${{ github.base_ref }} -- ${{ github.head_ref }} | grep -q '^module_b/'; then
            echo "::set-output name=folder-changed::true"
          else
            echo "::set-output name=folder-changed::false"
          fi

      - name: Installing dependencies
        if: steps.folder-changes.outputs.folder-changed == 'true'
        working-directory: module_b
        run: |
          make setup

      - name: Linting Module B
        if: steps.folder-changes.outputs.folder-changed == 'true'
        working-directory: module_b
        run: |
          make lint

      - name: Build and Test Module B
        if: steps.folder-changes.outputs.folder-changed == 'true'
        working-directory: module_b
        run: |
          docker build -t module_b:pull-request .

      - name: Test Module B
        if: steps.folder-changes.outputs.folder-changed == 'true'
        working-directory: module_b
        run: |
          make test


  build_and_test_module_c:
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10.2"

      - name: Check folder changes
        id: folder-changes
        run: |
          if git diff --name-only ${{ github.base_ref }} -- ${{ github.head_ref }} | grep -q '^module_c/'; then
            echo "::set-output name=folder-changed::true"
          else
            echo "::set-output name=folder-changed::false"
          fi

      - name: Installing dependencies
        if: steps.folder-changes.outputs.folder-changed == 'true'
        working-directory: module_c
        run: |
          make setup

      - name: Linting Module C
        if: steps.folder-changes.outputs.folder-changed == 'true'
        working-directory: module_c
        run: |
          make lint

      - name: Build and Test Module C
        if: steps.folder-changes.outputs.folder-changed == 'true'
        working-directory: module_c
        run: |
          docker build -t module_b:pull-request .

      - name: Test Module C
        if: steps.folder-changes.outputs.folder-changed == 'true'
        working-directory: module_c
        run: |
          make test

  deploy-infrastructure:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.0.0

      - name: Initialize Terraform
        run: make tf/init

      - name: Check Terraform formatting
        run: terraform fmt -check

      - name: Validate Terraform configuration
        run: make tf/validate

      - name: Plan Terraform changes
        run: ls -la && make tf/plan

      - name: Apply Terraform changes
        if: github.event.action == 'opened' || github.event.action == 'synchronize'
        run: make tf/apply

      - name: Destroy Terraform resources
        if: github.event.action == 'closed'
        run: terraform destroy -auto-approve infrastructure