name: Integration Pipeline

on:
  pull_request:
    types:
      - opened
      - synchronize

jobs:
  check:
    name: Check files
    runs-on: ubuntu-latest
    outputs:
      run_job_a: ${{ steps.check_files.outputs.run_job_a }}
      run_job_b: ${{ steps.check_files.outputs.run_job_b }}
      run_job_c: ${{ steps.check_files.outputs.run_job_c }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 2
      - name: check modified files
        id: check_files
        run: |
          echo "=============== list modified files ==============="
          git diff --name-only HEAD^ HEAD
          
          echo "========== check paths of modified files =========="
          run_job_a="false"
          run_job_b="false"
          run_job_c="false"
          
          for file in $(git diff --name-only HEAD^ HEAD); do
            echo $file
            if [[ $file == module_a/* ]]; then
              echo "This modified file is under the 'module_a/' folder."
              run_job_a="true"
            elif [[ $file == module_b/* ]]; then
              echo "This modified file is under the 'module_b/' folder."
              run_job_b="true"
            elif [[ $file == module_c/* ]]; then
              echo "This modified file is under the 'module_c/' folder."
              run_job_c="true"
            fi
          done

          echo "::set-output name=run_job_a::$run_job_a"
          echo "::set-output name=run_job_b::$run_job_b"
          echo "::set-output name=run_job_c::$run_job_c"

  build_and_test_module_a:
    needs: check
    if: needs.check.outputs.run_job_a == 'true'
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10.2"

      - name: Installing dependencies
        working-directory: module_a
        run: |
          make setup

      - name: Linting Module A
        working-directory: module_a
        run: |
          make lint

      - name: Building docker image
        working-directory: module_a
        run: |
          docker build -t module_a:pull-request .

      - name: Test Module A
        working-directory: module_a
        run: |
          make test

      - name: Deploy to Dev Module A
        working-directory: module_a
        run: |
          echo "Deploying module a to staging from Cache"

  build_and_test_module_b:
    needs: check
    if: needs.check.outputs.run_job_b == 'true'
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 2

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10.2"

      - name: Installing dependencies
        working-directory: module_b
        run: |
          make setup

      - name: Linting Module B
        working-directory: module_b
        run: |
          make lint

      - name: Build and Test Module B
        working-directory: module_b
        run: |
          docker build -t module_b:pull-request .

      - name: Test Module B
        working-directory: module_b
        run: |
          make test

      - name: Deploy to Dev Module B
        working-directory: module_b
        run: |
          echo "Deploying module b to staging from Cache"


  build_and_test_module_c:
    needs: check
    if: needs.check.outputs.run_job_c == 'true'
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 2

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10.2"

      - name: Installing dependencies
        working-directory: module_c
        run: |
          make setup

      - name: Linting Module C
        working-directory: module_c
        run: |
          make lint

      - name: Build and Test Module C
        working-directory: module_c
        run: |
          docker build -t module_b:pull-request .

      - name: Test Module C
        working-directory: module_c
        run: |
          make test

      - name: Deploy to Dev Module C
        working-directory: module_c
        run: |
          echo "Deploying module c to staging from Cache"

  deploy-infrastructure:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.0.0

      - name: Initialize Terraform
        run: make tf/init

      - name: Check Terraform formatting
        run: terraform fmt -check

      - name: Validate Terraform configuration
        run: make tf/validate

      - name: Plan Terraform changes
        run: ls -la && make tf/plan

      - name: Apply Terraform changes
        if: github.event.action == 'opened' || github.event.action == 'synchronize'
        run: make tf/apply

      - name: Destroy Terraform resources
        if: github.event.action == 'closed'
        run: terraform destroy -auto-approve infrastructure